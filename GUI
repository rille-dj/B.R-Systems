package viewer;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.Document;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JComboBox;
import javax.swing.ListSelectionModel;

import model.Customer;
import model.Order;
import model.Vehicle;

import javax.swing.JTable;
import javax.swing.JSeparator;

public class GUI extends JFrame {

	JTabbedPane jtp = new JTabbedPane();

	private controller.Controller controller = new controller.Controller();
	private JTextField txtSearchCustomer;
	private JTextField txtCustomerNrNewOrder;
	private JTextField txtFirstName;
	private JTextField txtLastName;
	private JTextField txtStreetAddress;
	private JTextField txtZipCode;
	private JTextField txtCity;
	private JTextField txtCountry;
	private JTextField txtPhoneNumber;
	private JTextField txtEmailAddress;
	private JTextField txtDiscount;
	private JLabel lblFirstName;
	private JLabel lblStreetAddress;
	private JLabel lblLastName;
	private JLabel lblPhoneNumber;
	private JLabel lblZipCode;
	private JLabel lblEmailAddress;
	private JLabel lblDiscount;
	private JLabel lblCity;
	private JLabel lblCountry;
	private JLabel lblCustomerNr;
	private JLabel lblSearchCustomer;
	private JLabel lblSelectCustomerNr;
	private JLabel lblVehicle;
	private JLabel lblVehicleType_1;
	private JLabel lblBrand;
	private JLabel lblRegNr;
	private JLabel lblSelectedRegnr;
	private JLabel lblModel;
	private JLabel lblModelYear;
	private JLabel lblLocation;
	private JLabel lblVehiclePrice;
	private JLabel lblOrderNr;
	private JLabel lblCustomerNrNewOrder;
	private JLabel lblRentalDate;
	private JLabel lblVehicleType;
	private JLabel lblOrderRegNr;
	private JLabel lblOrderBrand;
	private JLabel lblOrderModel;
	private JLabel lblOrderModelYear;
	private JLabel lblOrderLocation;
	private JLabel lblOrderVehiclePrice;
	private JLabel lblCustomerNrViewOrder;
	private JLabel lblListprice;
	private JLabel lblDiscountprice;
	private JLabel lblOrderDateViewOrder;
	private JLabel lblCustomerNrTableViewOrder;
	private JLabel lblOrderNrViewOrder;
	private JLabel lblRentalDateViewOrder;
	private JLabel lblVehicleTypeViewOrder;
	private JLabel lblRegnrvieworder;
	private JLabel lblBrandvieworder;
	private JLabel lblModelvieworder;
	private JLabel lblModelyearvieworder;
	private JLabel lblLocationvieworder;
	private JTextField txtOrderNr;
	private JTextField txtCustomerNr;
	private JTextField txtRentalDate;
	private JTextField txtSearchVehicle;
	private JTextField txtRegNr;
	private JTextField txtVehicleType;
	private JTextField txtBrand;
	private JTextField txtModel;
	private JTextField txtModelYear;
	private JTextField txtLocation;
	private JTextField txtVehiclePrice;
	private JLabel lblSearchVehicle;
	private JTextField txtCustomerNrViewOrder;
	private JTextField txtRegNrViewOrder;
	private JTextField txtBrandViewOrder;
	private JTextField txtModelViewOrder;
	private JTextField txtModelYearViewOrder;
	private JTextField txtLocationViewOrder;
	private JTextField txtOrderDateViewOrder;
	private JTextField txtListPrice;
	private JTextField txtDiscountPrice;
	
	final JComboBox<String> customerComboBox = new JComboBox<String>();
	final JComboBox<String> vehicleComboBox = new JComboBox<String>();
	final JComboBox<String> vehicleTypesComboBox = new JComboBox<String>();
	
	// Skapar tre olika comboboxes som används längre ner.

	public GUI() {

		super("Bihl & Rulle Rental Systems");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 586, 533);
		setLocationRelativeTo(null);
		getContentPane().add(jtp);
		setVisible(true);
		setResizable(false);

		
		
		
		controller.createTestObjects();

		// Skapar några kunder, ordrar och fordon som kan användas för att leka med.
		
		
		
		
		
		
		
		// Kund

		JPanel pnlCustomer = new JPanel();
		pnlCustomer.setLayout(null);
		jtp.addTab("Kund", pnlCustomer);
		JSeparator separator = new JSeparator();
		separator.setBounds(12, 100, 551, 2);
		pnlCustomer.add(separator);
		
		// Skapar JPanel för kund och skapar fliken Kund.

		txtSearchCustomer = new JTextField();
		txtSearchCustomer.setBounds(12, 42, 116, 22);
		pnlCustomer.add(txtSearchCustomer);
		txtSearchCustomer.setColumns(10);

		txtCustomerNr = new JTextField();
		txtCustomerNr.setEditable(false);
		// Går inte att edita txtCustomerNr.
		txtCustomerNr.setText(Integer.toString(controller.getCustomerRegistrySize()));
		// Hämtar storleken på kundregistret och skriver i txtCustomerNr. 
		txtCustomerNr.setBounds(12, 163, 116, 22);
		pnlCustomer.add(txtCustomerNr);
		txtCustomerNr.setColumns(10);

		txtFirstName = new JTextField();
		txtFirstName.setBounds(12, 227, 116, 22);
		pnlCustomer.add(txtFirstName);
		txtFirstName.setColumns(10);

		txtLastName = new JTextField();
		txtLastName.setBounds(140, 227, 116, 22);
		pnlCustomer.add(txtLastName);
		txtLastName.setColumns(10);

		txtStreetAddress = new JTextField();
		txtStreetAddress.setBounds(320, 227, 244, 22);
		pnlCustomer.add(txtStreetAddress);
		txtStreetAddress.setColumns(10);

		txtZipCode = new JTextField();
		txtZipCode.setBounds(320, 291, 116, 22);
		pnlCustomer.add(txtZipCode);
		txtZipCode.setColumns(10);

		txtCity = new JTextField();
		txtCity.setBounds(448, 291, 116, 22);
		pnlCustomer.add(txtCity);
		txtCity.setColumns(10);

		txtCountry = new JTextField();
		txtCountry.setBounds(320, 355, 244, 22);
		pnlCustomer.add(txtCountry);
		txtCountry.setColumns(10);

		txtPhoneNumber = new JTextField();
		txtPhoneNumber.setBounds(12, 291, 244, 22);
		pnlCustomer.add(txtPhoneNumber);
		txtPhoneNumber.setColumns(10);

		txtEmailAddress = new JTextField();
		txtEmailAddress.setBounds(12, 355, 244, 22);
		pnlCustomer.add(txtEmailAddress);
		txtEmailAddress.setColumns(10);

		txtDiscount = new JTextField();
		txtDiscount.setBounds(140, 163, 116, 22);
		pnlCustomer.add(txtDiscount);
		txtDiscount.setColumns(10);
		
		// Skapar JTextfields.

		lblSearchCustomer = new JLabel("Sök kundnummer");
		lblSearchCustomer.setBounds(12, 13, 116, 16);
		pnlCustomer.add(lblSearchCustomer);

		lblCustomerNr = new JLabel("Kundnummer");
		lblCustomerNr.setBounds(12, 134, 116, 16);
		pnlCustomer.add(lblCustomerNr);

		lblFirstName = new JLabel("Förnamn");
		lblFirstName.setBounds(12, 198, 116, 16);
		pnlCustomer.add(lblFirstName);

		lblLastName = new JLabel("Efternamn");
		lblLastName.setBounds(140, 198, 116, 16);
		pnlCustomer.add(lblLastName);

		lblStreetAddress = new JLabel("Adress");
		lblStreetAddress.setBounds(320, 198, 116, 16);
		pnlCustomer.add(lblStreetAddress);

		lblPhoneNumber = new JLabel("Telefonnummer");
		lblPhoneNumber.setBounds(12, 262, 116, 16);
		pnlCustomer.add(lblPhoneNumber);

		lblZipCode = new JLabel("Postnummer");
		lblZipCode.setBounds(320, 262, 116, 16);
		pnlCustomer.add(lblZipCode);

		lblEmailAddress = new JLabel("Epostadress");
		lblEmailAddress.setBounds(12, 326, 116, 16);
		pnlCustomer.add(lblEmailAddress);

		lblDiscount = new JLabel("Procentrabatt");
		lblDiscount.setBounds(140, 134, 116, 16);
		pnlCustomer.add(lblDiscount);

		lblCity = new JLabel("Ort");
		lblCity.setBounds(448, 262, 116, 16);
		pnlCustomer.add(lblCity);

		lblCountry = new JLabel("Land");
		lblCountry.setBounds(320, 326, 116, 16);
		pnlCustomer.add(lblCountry);
		
		lblSelectCustomerNr = new JLabel("Välj kundnummer");
		lblSelectCustomerNr.setBounds(320, 13, 116, 16);
		pnlCustomer.add(lblSelectCustomerNr);
		
		// Skapar JLables.
		
		customerComboBox.setBounds(320, 42, 116, 22);
		pnlCustomer.add(customerComboBox);
		populateCustomerComboBox();
		
		// Lägger till en combobox och använder metoden populateCustomerComboBox för att fylla den med kundnummer.
		
		JButton btnSelectedCustomer = new JButton("Visa kund");
		btnSelectedCustomer.setBounds(449, 41, 115, 25);
		pnlCustomer.add(btnSelectedCustomer);
		btnSelectedCustomer.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				model.Customer tmp = controller.findCustomer(Integer.parseInt(customerComboBox.getSelectedItem().toString()));
				// Tar valt kundnummer från comboboxen och hämtar kund med findCustomer, lägger kunden i variabeln tmp.
				if (tmp != null) {
					txtCustomerNr.setText(Integer.toString(tmp.getCustomerNr()));
					txtDiscount.setText(tmp.getDiscountPercentage());
					txtFirstName.setText(tmp.getFirstName());
					txtLastName.setText(tmp.getLastName());
					txtPhoneNumber.setText(tmp.getPhoneNr());
					txtEmailAddress.setText(tmp.getEmailAddress());
					txtStreetAddress.setText(tmp.getStreetAdress());
					txtZipCode.setText(tmp.getZipCode());
					txtCity.setText(tmp.getCity());
					txtCountry.setText(tmp.getCountry());
				}
				// Om tmp inte är tom dvs null, hämta kundens alla attribut och skriv ut i JTextFieldsen.
		else {
			JOptionPane.showMessageDialog(null, "Angiven kund existerar inte!", "Felmeddelande", JOptionPane.ERROR_MESSAGE);
			// Annars visa felmeddelande.
		}
	}
});
	

		JButton btnSearchCustomer = new JButton("Sök");
		btnSearchCustomer.setBounds(140, 41, 116, 25);
		pnlCustomer.add(btnSearchCustomer);
		btnSearchCustomer.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				boolean cnumber = true;

				if ((cnumber == intIsNotParseable(txtSearchCustomer.getText())) || (txtSearchCustomer.getText().trim().length() < 1)) {
					// Om kundnumret inte är parseable ELLER om antalet tecken i txtSearchCustomer är mindre än 1:
					JOptionPane.showMessageDialog(null,	"Vänligen ange kundnummer (i sifferformat)!", "Felmeddelande", JOptionPane.ERROR_MESSAGE);
				}
				else {
					model.Customer tmp = controller.findCustomer(Integer.parseInt(txtSearchCustomer.getText()));
					// Annars hämta kund med findCustomer och lägg i variabeln tmp.
					
					if (tmp != null) {
						txtCustomerNr.setText(Integer.toString(tmp.getCustomerNr()));
						txtDiscount.setText(tmp.getDiscountPercentage());
						txtFirstName.setText(tmp.getFirstName());
						txtLastName.setText(tmp.getLastName());
						txtPhoneNumber.setText(tmp.getPhoneNr());
						txtEmailAddress.setText(tmp.getEmailAddress());
						txtStreetAddress.setText(tmp.getStreetAdress());
						txtZipCode.setText(tmp.getZipCode());
						txtCity.setText(tmp.getCity());
						txtCountry.setText(tmp.getCountry());
					}
					// Om tmp inte är tom dvs null, hämta kundens alla attribut och skriv ut i JTextFieldsen.


					else {
						JOptionPane.showMessageDialog(null, "Angiven kund existerar inte!", "Felmeddelande", JOptionPane.ERROR_MESSAGE);
						// Annars visa felmeddelande.
					}
				}

			}
		});

		JButton btnClearCustomer = new JButton("Rensa formulär");
		btnClearCustomer.setBounds(388, 418, 176, 25);
		pnlCustomer.add(btnClearCustomer);
		btnClearCustomer.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				clearCustomer();
				txtCustomerNr.setText(Integer.toString(controller.getCustomerRegistrySize()));
			}
		});
		// Rensar kunddetaljer och hämtar storleken på kundregistret och skriver ut i txtCustomerNr.

		JButton btnCreateCustomer = new JButton("Spara kund");
		btnCreateCustomer.setBounds(12, 418, 176, 25);
		pnlCustomer.add(btnCreateCustomer);
		btnCreateCustomer.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				boolean cdiscount = true;

				if (cdiscount == doubleIsNotParseable(txtDiscount.getText())) {
					// Om procentrabattfältet inte är parseable:
					JOptionPane.showMessageDialog(null,	"Vänligen ange procentrabatt (heltal i sifferformat)!", "Felmeddelande", JOptionPane.ERROR_MESSAGE);
				}
				else if (txtCustomerNr.getText().trim().length() > 0
						&& txtFirstName.getText().trim().length() > 0
						&& txtLastName.getText().trim().length() > 0
						&& txtStreetAddress.getText().trim().length() > 0
						&& txtZipCode.getText().trim().length() > 0
						&& txtCity.getText().trim().length() > 0
						&& txtCountry.getText().trim().length() > 0
						&& txtPhoneNumber.getText().trim().length() > 0
						&& txtEmailAddress.getText().trim().length() > 0
						&& txtDiscount.getText().trim().length() > 0) {
					// Om alla JTextfieldsen har fler än 0 tecken körs metoden createCustomer och den plockar alla attribut till den nya kunden från JTextFieldsen
					ArrayList<Order> tmpList = controller.findCustomer(Integer.parseInt(txtCustomerNr.getText())).getPreviousOrders();
					controller.createCustomer(
							Integer.parseInt(txtCustomerNr.getText()),
							txtFirstName.getText(), txtLastName.getText(),
							txtStreetAddress.getText(), txtZipCode.getText(),
							txtCity.getText(), txtCountry.getText(),
							txtPhoneNumber.getText(),
							txtEmailAddress.getText(),
							Double.parseDouble(txtDiscount.getText()));
					
					controller.findCustomer(Integer.parseInt(txtCustomerNr.getText())).getPreviousOrders().addAll(tmpList);
					tmpList.clear();
					clearCustomer();
					txtCustomerNr.setText(Integer.toString(controller.getCustomerRegistrySize()));
					// Rensar kunddetaljer och uppdaterar txtCustomerNr till den nya storleken på kundregistret.
				}

				else {
					JOptionPane.showMessageDialog(null, "Vänligen fyll i alla fält!", "Felmeddelande", JOptionPane.ERROR_MESSAGE);
					// Om något av JTextFieldsen är tomma kommer felmeddelande.
				}
				populateCustomerComboBox();
				// Kör metoden populateCustomerComboBox för att uppdatera comboboxen med den nya kunden.
			}
		});

		JButton btnRemoveCustomer = new JButton("Ta bort kund");
		btnRemoveCustomer.setBounds(200, 418, 176, 25);
		pnlCustomer.add(btnRemoveCustomer);
		btnRemoveCustomer.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				controller.removeCustomer(Integer.parseInt(txtCustomerNr.getText()));
				clearCustomer();
				populateCustomerComboBox();
			}
		});
		// Tar bort kunden med metoden removeCustomer, rensar kunddetaljerna med metoden clearCustomer och uppdaterar comboboxen.
	
		
	

		
		
		
		
		
		
		
		// Fordon

	
		JPanel pnlVehicle = new JPanel();
		pnlVehicle.setLayout(null);
		jtp.addTab("Fordon", pnlVehicle);
		JSeparator separator_1 = new JSeparator();
		separator_1.setBounds(12, 100, 551, 2);
		pnlVehicle.add(separator_1);
		
		// Skapar JPanel för fordon och flik för fordon.

		lblVehicle = new JLabel();
		lblVehicle.setBounds(220, 5, 136, 16);
		pnlVehicle.add(lblVehicle);
		
		lblVehicleType_1 = new JLabel("Fordonstyp");
		lblVehicleType_1.setBounds(12, 198, 116, 16);
		pnlVehicle.add(lblVehicleType_1);

		lblBrand = new JLabel("Märke");
		lblBrand.setBounds(12, 262, 56, 16);
		pnlVehicle.add(lblBrand);
		
		lblRegNr = new JLabel("Regnummer");
		lblRegNr.setBounds(12, 134, 116, 16);
		pnlVehicle.add(lblRegNr);
		
		lblSelectedRegnr = new JLabel("Välj regnummer");
		lblSelectedRegnr.setBounds(321, 13, 116, 16);
		pnlVehicle.add(lblSelectedRegnr);
		
		lblModel = new JLabel("Modell");
		lblModel.setBounds(140, 262, 56, 16);
		pnlVehicle.add(lblModel);
		
		lblModelYear = new JLabel("Årsmodell");
		lblModelYear.setBounds(12, 326, 116, 16);
		pnlVehicle.add(lblModelYear);
		
		lblLocation = new JLabel("Plats");
		lblLocation.setBounds(140, 326, 56, 16);
		pnlVehicle.add(lblLocation);
		
		lblVehiclePrice = new JLabel("Pris");
		lblVehiclePrice.setBounds(140, 134, 116, 16);
		pnlVehicle.add(lblVehiclePrice);
		
		lblSearchVehicle = new JLabel("Sök regnummer");
		lblSearchVehicle.setBounds(12, 13, 116, 16);
		pnlVehicle.add(lblSearchVehicle);
		
		// Skapar JLabels.

		txtSearchVehicle = new JTextField();
		txtSearchVehicle.setBounds(12, 42, 116, 22);
		pnlVehicle.add(txtSearchVehicle);
		txtSearchVehicle.setColumns(10);

		txtRegNr = new JTextField();
		txtRegNr.setBounds(12, 163, 116, 22);
		pnlVehicle.add(txtRegNr);
		txtRegNr.setColumns(10);

		txtVehicleType = new JTextField();
		txtVehicleType.setBounds(12, 227, 244, 22);
		pnlVehicle.add(txtVehicleType);
		txtVehicleType.setColumns(10);

		txtBrand = new JTextField();
		txtBrand.setBounds(12, 291, 116, 22);
		pnlVehicle.add(txtBrand);
		txtBrand.setColumns(10);

		txtModel = new JTextField();
		txtModel.setBounds(140, 291, 116, 22);
		pnlVehicle.add(txtModel);
		txtModel.setColumns(10);

		txtModelYear = new JTextField();
		txtModelYear.setBounds(12, 355, 116, 22);
		pnlVehicle.add(txtModelYear);
		txtModelYear.setColumns(10);

		txtLocation = new JTextField();
		txtLocation.setBounds(140, 355, 116, 22);
		pnlVehicle.add(txtLocation);
		txtLocation.setColumns(10);

		txtVehiclePrice = new JTextField();
		txtVehiclePrice.setBounds(140, 163, 116, 22);
		pnlVehicle.add(txtVehiclePrice);
		txtVehiclePrice.setColumns(10);
		
		// Skapar JTextFields.

		vehicleComboBox.setBounds(321, 42, 116, 22);
		pnlVehicle.add(vehicleComboBox);
		populateVehicleComboBox();
		
		// Lägger till en combobox och använder metoden populateVehicleComboBox för att fylla den med regnummer.
		
		JButton btnSelectedVehicle = new JButton("Visa fordon");
		btnSelectedVehicle.setBounds(449, 41, 116, 25);
		pnlVehicle.add(btnSelectedVehicle);
		btnSelectedVehicle.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				model.Vehicle tmpVehicle = controller.findVehicle(vehicleComboBox.getSelectedItem().toString());
				// Tar regnummer från valt fordon i comboboxen och kör metoden findVehicle för att hämta fordon och lägger fordonet i variabeln tmpVehicle.
				if (tmpVehicle != null) {
					txtRegNr.setText(tmpVehicle.getRegNr());
					txtVehiclePrice.setText(tmpVehicle.getVehiclePrice());
					txtVehicleType.setText(tmpVehicle.getVehicleType());
					txtBrand.setText(tmpVehicle.getBrand());
					txtModel.setText(tmpVehicle.getModel());
					txtModelYear.setText(tmpVehicle.getModelYear());
					txtLocation.setText(tmpVehicle.getLocation());
					// Om tmpVehicle inte är tom, hämta attribut från fordonet och skriv ut i JTextfieldsen.
				}
				else {
					JOptionPane.showMessageDialog(null, "Angivet fordon existerar inte!", "Felmeddelande", JOptionPane.ERROR_MESSAGE);
				}
			}
		});
	

		JButton btnSearchVehicle = new JButton("Sök fordon");
		btnSearchVehicle.setBounds(140, 41, 116, 25);
		pnlVehicle.add(btnSearchVehicle);
		btnSearchVehicle.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				model.Vehicle tmpVehicle = controller.findVehicle(txtSearchVehicle.getText());
				// Tar regnummer från JTextFielden och kör metoden findVehicle för att hämta fordon och lägger fordonet i variabeln tmpVehicle.
				if (tmpVehicle != null) {
					txtRegNr.setText(tmpVehicle.getRegNr());
					txtVehiclePrice.setText(tmpVehicle.getVehiclePrice());
					txtVehicleType.setText(tmpVehicle.getVehicleType());
					txtBrand.setText(tmpVehicle.getBrand());
					txtModel.setText(tmpVehicle.getModel());
					txtModelYear.setText(tmpVehicle.getModelYear());
					txtLocation.setText(tmpVehicle.getLocation());
					// Om tmpVehicle inte är tom, hämta attribut från fordonet och skriv ut i JTextfieldsen.
				}
				else {
					JOptionPane.showMessageDialog(null, "Angivet fordon existerar inte!", "Felmeddelande", JOptionPane.ERROR_MESSAGE);
				}
			}
		});
		
		JButton btnCreateVehicle = new JButton("Spara fordon");
		btnCreateVehicle.setBounds(12, 418, 176, 25);
		pnlVehicle.add(btnCreateVehicle);
		btnCreateVehicle.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				boolean vprice = true;
				
				if (vprice == intIsNotParseable(txtVehiclePrice.getText())) {
					JOptionPane.showMessageDialog(null,	"Vänligen ange pris (heltal i sifferformat)!", "Felmeddelande", JOptionPane.ERROR_MESSAGE);
				// Om Stringen i txtVehiclePrice inte går att parsea till int, visa felmeddelande.
				}
				else if (txtRegNr.getText().trim().length() > 0
						&& txtVehicleType.getText().trim().length() > 0
						&& txtBrand.getText().trim().length() > 0
						&& txtModel.getText().trim().length() > 0
						&& txtModelYear.getText().trim().length() > 0
						&& txtVehiclePrice.getText().trim().length() > 0
						&& txtLocation.getText().trim().length() > 0) {
					controller.createVehicle(txtRegNr.getText(), txtVehicleType.getText(), txtBrand.getText(), txtModel.getText(), txtModelYear.getText(),	txtLocation.getText(), Double.parseDouble(txtVehiclePrice.getText()));
					// Om alla JTextFields har mer än 0 tecken, skapar fordon med metoden addVehicle och den plockar alla attribut till det nya fordonet från JTextFieldsen.
					clearVehicle();
					// Rensar fordonsdetaljer med metoden clearVehicle.
				}

				else {
					JOptionPane.showMessageDialog(null,	"Vänligen fyll i alla fält!", "Felmeddelande", JOptionPane.ERROR_MESSAGE);
				}
				populateVehicleComboBox();
				populateVehicleTypesComboBox();
				// Uppdaterar comboboxarna med det nyskapade fordonet.
			}
		});

		JButton btnClearVehicle = new JButton("Rensa formulär");
		btnClearVehicle.setBounds(389, 418, 176, 25);
		pnlVehicle.add(btnClearVehicle);
		btnClearVehicle.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				clearVehicle();
				// Rensar fordonsdetaljer.
			}
		});

		JButton btnRemoveVehicle = new JButton("Ta bort fordon");
		btnRemoveVehicle.setBounds(200, 418, 176, 25);
		pnlVehicle.add(btnRemoveVehicle);
		btnRemoveVehicle.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				controller.removeVehicle(txtRegNr.getText());
				// Kör metoden removeVehicle och tar bort fordonet från fordonsregistret.
				clearVehicle();
				populateVehicleComboBox();
				populateVehicleTypesComboBox();
				// Rensar fordonsdetaljer och uppdaterar comboboxarna.
			}
		});

	
		
	
	
		
		
		
		
		
		
		
		
		// Lägg order

		
		
		JPanel pnlOrder = new JPanel();
		pnlOrder.setLayout(null);
		jtp.addTab("Lägg order", pnlOrder);
		
		// Skapar JPanel och flik för Lägg Order.

		lblOrderNr = new JLabel("Ordernummer");
		lblOrderNr.setBounds(12, 13, 116, 16);
		pnlOrder.add(lblOrderNr);
		
		lblCustomerNrNewOrder = new JLabel("Kundnummer");
		lblCustomerNrNewOrder.setBounds(12, 392, 116, 16);
		pnlOrder.add(lblCustomerNrNewOrder);

		lblRentalDate = new JLabel("Datum (ÅÅMMDD)");
		lblRentalDate.setBounds(140, 13, 116, 16);
		pnlOrder.add(lblRentalDate);

		lblVehicleType = new JLabel("Fordonstyp");
		lblVehicleType.setBounds(268, 13, 169, 16);
		pnlOrder.add(lblVehicleType);

		lblOrderRegNr = new JLabel("Regnr");
		lblOrderRegNr.setBounds(12, 130, 56, 16);
		pnlOrder.add(lblOrderRegNr);

		lblOrderBrand = new JLabel("Märke");
		lblOrderBrand.setBounds(104, 130, 56, 16);
		pnlOrder.add(lblOrderBrand);

		lblOrderModel = new JLabel("Modell");
		lblOrderModel.setBounds(196, 130, 56, 16);
		pnlOrder.add(lblOrderModel);

		lblOrderModelYear = new JLabel("Årsmodell");
		lblOrderModelYear.setBounds(288, 130, 80, 16);
		pnlOrder.add(lblOrderModelYear);

		lblOrderLocation = new JLabel("Plats");
		lblOrderLocation.setBounds(380, 130, 56, 16);
		pnlOrder.add(lblOrderLocation);

		lblOrderVehiclePrice = new JLabel("Pris");
		lblOrderVehiclePrice.setBounds(472, 130, 56, 16);
		pnlOrder.add(lblOrderVehiclePrice);
		
		// JLabels

		txtOrderNr = new JTextField();
		txtOrderNr.setBounds(12, 42, 116, 22);
		txtOrderNr.setEditable(false);
		txtOrderNr.setText(Integer.toString(controller.getOrderRegistrySize()));
		pnlOrder.add(txtOrderNr);
		txtOrderNr.setColumns(10);

		txtCustomerNrNewOrder = new JTextField();
		txtCustomerNrNewOrder.setBounds(12, 421, 116, 22);
		pnlOrder.add(txtCustomerNrNewOrder);
		txtCustomerNrNewOrder.setColumns(10);

		txtRentalDate = new JTextField();
		txtRentalDate.setBounds(140, 42, 116, 22);
		pnlOrder.add(txtRentalDate);
		txtRentalDate.setColumns(10);
		
		// JTextfields

		vehicleTypesComboBox.setBounds(268, 42, 169, 22);
		pnlOrder.add(vehicleTypesComboBox);
		populateVehicleTypesComboBox();
		
		// Lägger till en combobox och använder metoden populateVehicleTypesComboBox för att fylla den med fordonstyper.

		final DefaultTableModel model = new DefaultTableModel(){
			public boolean isCellEditable(int row, int column){
				return false;
			}
		};
		
		// Skapar en DefaultTableModel (model) och genom metoden isCellEditable bestämmer vi att man inte kan redigera innehållet i modellen.
		
		final JTable table = new JTable(16, 6);
		table.setBounds(12, 159, 553, 220);
		model.setColumnIdentifiers(new String[] { "", "", "", "", "", "" });
		table.setVisible(true);
		table.setModel(model);
		table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		table.setColumnSelectionAllowed(false);
		table.setRowSelectionAllowed(true);
		pnlOrder.add(table);
		//Skapar och lägger till en JTable till panelen Order. JTablen har 6 kolumner. Endast val av rows är enabled och endast en row kan väljas åt gången.

		final JButton btnAvailableVehicles = new JButton("Visa tillgängliga fordon");
		btnAvailableVehicles.setBounds(12, 77, 244, 25);
		btnAvailableVehicles.setEnabled(false);
		pnlOrder.add(btnAvailableVehicles);
		//Skapar Jbutton btnAvailableVehicles som är disabled by default.
		
		Document textFieldDoc = txtRentalDate.getDocument();
		textFieldDoc.addDocumentListener(new DocumentListener() {
		   public void changedUpdate(DocumentEvent e) {
		      updated(e);
		   }
		   public void insertUpdate(DocumentEvent e) {
		      updated(e);
		   }
		   public void removeUpdate(DocumentEvent e) {
		      updated(e);
		   }
		   private void updated(DocumentEvent e) {
		      boolean enable = e.getDocument().getLength() == 6;
		      btnAvailableVehicles.setEnabled(enable);
		   }
		});
		//Enablear btnAvailableVehicles om txtRentalDate har exakt 6 bokstäver ifyllda.
		
		
		btnAvailableVehicles.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				model.setRowCount(0);
				String selected = vehicleTypesComboBox.getSelectedItem().toString();
				ArrayList<Vehicle> tmplist = controller.findAvailableTypesAtDate(selected, txtRentalDate.getText());
				for (Vehicle tmp : tmplist) {
					model.addRow(new String[] { tmp.getRegNr(), tmp.getBrand(),	tmp.getModel(), tmp.getModelYear(),	tmp.getLocation(), (tmp.getVehiclePrice()) });
				}
			}
		});
		/* Kollar vilket item som är selected i listan över fordonstyper. Använder metoden findAvailableTypesAtDate för att hämta och fylla en ArrayList (tmplist)
		med fordon som är tillgängliga vid datumet som är angett i txtRentalDate. Forloopar igenom tmplist och skriver ut alla fordon i tabellen (model.addRow) */

		final JButton btnAddVehicleOrder = new JButton("Boka valt fordon och spara order");
		btnAddVehicleOrder.setBounds(265, 405, 300, 25);
		btnAddVehicleOrder.setEnabled(false);
		pnlOrder.add(btnAddVehicleOrder);
		// Skapar JButton btnAddVehicleOrder som är disabled by default.

		ListSelectionModel listSelectionModel = table.getSelectionModel();
		listSelectionModel.addListSelectionListener(new ListSelectionListener() {
					public void valueChanged(ListSelectionEvent e) {
						ListSelectionModel lsm = (ListSelectionModel) e.getSource();
						btnAddVehicleOrder.setEnabled(!lsm.isSelectionEmpty());
					}
				});
		//Enablear btnAddVehicleOrder om någon rad i tabellen är selected.

		btnAddVehicleOrder.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				boolean cnumber = true;
				if ((cnumber == intIsNotParseable(txtCustomerNrNewOrder.getText()))	|| (txtCustomerNrNewOrder.getText().trim().length() < 1)) {
					JOptionPane.showMessageDialog(null,	"Vänligen ange kundnummer (i sifferformat)!", "Felmeddelande", JOptionPane.ERROR_MESSAGE);
				}
				else {
					Customer tmpcust = controller.findCustomer(Integer.parseInt(txtCustomerNrNewOrder.getText()));
					if (tmpcust != null) {
						controller.createOrder(Integer.parseInt(txtOrderNr.getText()), controller.getOrderDate(), txtRentalDate.getText(), controller.findCustomer(Integer.parseInt(txtCustomerNrNewOrder.getText())), controller.findVehicle(table.getValueAt(table.getSelectedRow(), 0).toString()));
						model.setRowCount(0);
						clearCreateOrder();
						txtOrderNr.setText(Integer.toString(controller.getOrderRegistrySize()));
					}
					else {
						JOptionPane.showMessageDialog(null,	"Angiven kund existerar inte!", "Felmeddelande",	JOptionPane.ERROR_MESSAGE);
					}
				}
			}
		});
		//Använder metoden intIsNotParseable för att kontrollera så att user inte har skrivit String i txtCustomerNrNewOrder (måste vara en int).
		
		

		
		
		
		
		
		
		
		// Visa order

		
		
		JPanel pnlViewOrder = new JPanel();
		pnlViewOrder.setLayout(null);
		JLabel lblViewOrder = new JLabel();
		lblViewOrder.setBounds(220, 5, 136, 16);
		pnlViewOrder.add(lblViewOrder);
		jtp.addTab("Visa order", pnlViewOrder);
		
		// Skapar JPanel och fliken för Visa Order

		lblCustomerNrViewOrder = new JLabel("Kundnummer");
		lblCustomerNrViewOrder.setBounds(12, 13, 116, 16);
		pnlViewOrder.add(lblCustomerNrViewOrder);
		
		lblListprice = new JLabel("Listpris");
		lblListprice.setBounds(321, 347, 116, 16);
		pnlViewOrder.add(lblListprice);

		lblDiscountprice = new JLabel("Kundens pris");
		lblDiscountprice.setBounds(449, 347, 116, 16);
		pnlViewOrder.add(lblDiscountprice);

		lblOrderDateViewOrder = new JLabel("Orderdatum");
		lblOrderDateViewOrder.setBounds(321, 283, 116, 16);
		pnlViewOrder.add(lblOrderDateViewOrder);

		lblCustomerNrTableViewOrder = new JLabel("Kundnr");
		lblCustomerNrTableViewOrder.setBounds(12, 91, 58, 16);
		pnlViewOrder.add(lblCustomerNrTableViewOrder);

		lblOrderNrViewOrder = new JLabel("Ordernr");
		lblOrderNrViewOrder.setBounds(86, 91, 58, 16);
		pnlViewOrder.add(lblOrderNrViewOrder);

		lblRentalDateViewOrder = new JLabel("Hyrdatum");
		lblRentalDateViewOrder.setBounds(160, 91, 67, 16);
		pnlViewOrder.add(lblRentalDateViewOrder);

		lblVehicleTypeViewOrder = new JLabel("Fordonstyp");
		lblVehicleTypeViewOrder.setBounds(235, 91, 67, 16);
		pnlViewOrder.add(lblVehicleTypeViewOrder);

		lblRegnrvieworder = new JLabel("Regnummer");
		lblRegnrvieworder.setBounds(321, 91, 116, 16);
		pnlViewOrder.add(lblRegnrvieworder);

		lblBrandvieworder = new JLabel("Märke");
		lblBrandvieworder.setBounds(449, 91, 116, 16);
		pnlViewOrder.add(lblBrandvieworder);

		lblModelvieworder = new JLabel("Modell");
		lblModelvieworder.setBounds(321, 155, 116, 16);
		pnlViewOrder.add(lblModelvieworder);

		lblModelyearvieworder = new JLabel("Årsmodell");
		lblModelyearvieworder.setBounds(449, 155, 116, 16);
		pnlViewOrder.add(lblModelyearvieworder);

		lblLocationvieworder = new JLabel("Plats");
		lblLocationvieworder.setBounds(321, 219, 116, 16);
		pnlViewOrder.add(lblLocationvieworder);

		// JLabels

		txtCustomerNrViewOrder = new JTextField();
		txtCustomerNrViewOrder.setBounds(12, 42, 116, 22);
		pnlViewOrder.add(txtCustomerNrViewOrder);
		txtCustomerNrViewOrder.setColumns(10);

		txtRegNrViewOrder = new JTextField();
		txtRegNrViewOrder.setBounds(321, 120, 116, 22);
		txtRegNrViewOrder.setEditable(false);
		pnlViewOrder.add(txtRegNrViewOrder);
		txtRegNrViewOrder.setColumns(10);

		txtBrandViewOrder = new JTextField();
		txtBrandViewOrder.setBounds(449, 120, 116, 22);
		txtBrandViewOrder.setEditable(false);
		pnlViewOrder.add(txtBrandViewOrder);
		txtBrandViewOrder.setColumns(10);

		txtModelViewOrder = new JTextField();
		txtModelViewOrder.setBounds(321, 184, 116, 22);
		txtModelViewOrder.setEditable(false);
		pnlViewOrder.add(txtModelViewOrder);
		txtModelViewOrder.setColumns(10);

		txtModelYearViewOrder = new JTextField();
		txtModelYearViewOrder.setBounds(449, 184, 116, 22);
		txtModelYearViewOrder.setEditable(false);
		pnlViewOrder.add(txtModelYearViewOrder);
		txtModelYearViewOrder.setColumns(10);

		txtLocationViewOrder = new JTextField();
		txtLocationViewOrder.setBounds(321, 248, 244, 22);
		txtLocationViewOrder.setEditable(false);
		pnlViewOrder.add(txtLocationViewOrder);
		txtLocationViewOrder.setColumns(10);

		txtOrderDateViewOrder = new JTextField();
		txtOrderDateViewOrder.setBounds(321, 312, 244, 22);
		txtOrderDateViewOrder.setEditable(false);
		pnlViewOrder.add(txtOrderDateViewOrder);
		txtOrderDateViewOrder.setColumns(10);

		txtListPrice = new JTextField();
		txtListPrice.setBounds(321, 376, 116, 22);
		txtListPrice.setEditable(false);
		pnlViewOrder.add(txtListPrice);
		txtListPrice.setColumns(10);

		txtDiscountPrice = new JTextField();
		txtDiscountPrice.setBounds(449, 376, 116, 22);
		txtDiscountPrice.setEditable(false);
		pnlViewOrder.add(txtDiscountPrice);
		txtDiscountPrice.setColumns(10);
		
		//JTextfields
		
		final DefaultTableModel model2 = new DefaultTableModel(){
			public boolean isCellEditable(int row, int column){
				return false;
			}
		};
		// Skapar en DefaultTableModel (model2) och genom metoden isCellEditable bestämmer vi att man inte kan redigera innehållet i modellen.
		
		final JTable table2 = new JTable(10, 3);
		table2.setBounds(12, 120, 297, 278);
		model2.setColumnIdentifiers(new String[] { "", "", "", "", });
		table2.setVisible(true);
		table2.setModel(model2);
		table2.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		table2.setColumnSelectionAllowed(false);
		table2.setRowSelectionAllowed(true);
		pnlViewOrder.add(table2);
		
		//Skapar en JTable med 4 kolumner. Endast val av rows är enabled och endast en row kan väljas åt gången.

		JButton btnSearchCustomerViewOrder = new JButton("Visa ordrar");
		btnSearchCustomerViewOrder.setBounds(140, 41, 116, 25);
		pnlViewOrder.add(btnSearchCustomerViewOrder);
		btnSearchCustomerViewOrder.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				model2.setRowCount(0);
				clearViewOrder();
				boolean cnumber = true;
				
				if ((cnumber == intIsNotParseable(txtCustomerNrViewOrder.getText())) || (txtCustomerNrViewOrder.getText().trim().length() < 1)) {
					//Om texten i txtCustomerNrViewOrder inte går att parsea till int ELLER om texten är mindre än 1 tecken:
					JOptionPane.showMessageDialog(null,	"Vänligen ange kundnummer (i sifferformat)!", "Felmeddelande", JOptionPane.ERROR_MESSAGE);
				}
				else {
					int selectedCustomer = Integer.parseInt(txtCustomerNrViewOrder.getText());
					Customer tmpcust = controller.findCustomer(selectedCustomer);
					//Annars använd kundnumret från txtCustomerNrViewOrder i metoden findCustomer och hämta den valda kunden, som läggs i variablen tmpcust. 
					if (tmpcust == null) {
						//Om variablen tmpcust är lika med null, dvs den är tom:
						JOptionPane.showMessageDialog(null,	"Angiven kund existerar inte!", "Felmeddelande", JOptionPane.ERROR_MESSAGE);
					}
					else {
						ArrayList<Order> tmporderlist = controller.findCustomer(selectedCustomer).getPreviousOrders();
						//Annars hämta den valda kundens previousOrders och lägg dom i ArrayListen tmporderlist. 
						if (tmporderlist.isEmpty()) {
							//Om tmporderlist är tom, dvs kunden har inga tidigare ordrar:
							JOptionPane.showMessageDialog(null,	"Kunden har ingen orderhistorik!", "Felmeddelande", JOptionPane.ERROR_MESSAGE);
						}
						else {
							for (Order tmporder : tmporderlist) {
								model2.addRow(new String[] {
										Integer.toString(tmporder.getCustomer().getCustomerNr()), Integer.toString(tmporder.getOrderNr()), tmporder.getRentalDate(), tmporder.getVehicle().getVehicleType() });
								//Annars forloopa igenom tmporderlist och skriv ut ordrarna och dess attribut i model2 med den inbyggda metoden addRow.
							}
						}
					}
				}
			}
		});

		final JButton btnOrderDetails = new JButton("Orderdetaljer");
		btnOrderDetails.setBounds(12, 418, 176, 25);
		btnOrderDetails.setEnabled(false);
		pnlViewOrder.add(btnOrderDetails);

		final JButton btnRemoveOrder = new JButton("Ta bort order");
		btnRemoveOrder.setBounds(200, 418, 176, 25);
		btnRemoveOrder.setEnabled(false);
		pnlViewOrder.add(btnRemoveOrder);
		
		// Skapar knapparna btnOrderDetails och btnRemoveOrder som båda två är disabled by default.

		ListSelectionModel listSelectionModel2 = table2.getSelectionModel();
		listSelectionModel2.addListSelectionListener(new ListSelectionListener() {
					public void valueChanged(ListSelectionEvent e) {
						ListSelectionModel lsm = (ListSelectionModel) e.getSource();
						btnOrderDetails.setEnabled(!lsm.isSelectionEmpty());
						btnRemoveOrder.setEnabled(!lsm.isSelectionEmpty());
					}
				});
		// Enablear knapparna om användaren selectar någon rad i tabellen.

		btnOrderDetails.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int selectedOrderNr = Integer.parseInt(table2.getValueAt(table2.getSelectedRow(), 1).toString());
				// Hämtar värdet från kolumn 2 på den rad som är selected och lägger det i variablen selectedOrderNr.
				txtRegNrViewOrder.setText(controller.getOrder(selectedOrderNr).getVehicle().getRegNr());
				txtBrandViewOrder.setText(controller.getOrder(selectedOrderNr).getVehicle().getBrand());
				txtModelViewOrder.setText(controller.getOrder(selectedOrderNr).getVehicle().getModel());
				txtModelYearViewOrder.setText(controller.getOrder(selectedOrderNr).getVehicle().getModelYear());
				txtLocationViewOrder.setText(controller.getOrder(selectedOrderNr).getVehicle().getLocation());
				txtOrderDateViewOrder.setText(controller.getOrder(selectedOrderNr).getOrderDate());
				txtListPrice.setText(controller.getOrder(selectedOrderNr).getVehicle().getVehiclePrice());
				txtDiscountPrice.setText(controller.getOrder(selectedOrderNr).getOrderPrice());
				//Använder selectedOrderNr för att hämta order -> hämta fordon -> hämta fordonets attribut, och sedan skriva ut dom i textfälten.
			}
		});

		btnRemoveOrder.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int selectedCustomerNr = Integer.parseInt(txtCustomerNrViewOrder.getText());
				// Tar kundnumret från txtCustomerNrViewOrder det i variablen selectedCustomerNr.
				controller.removeOrder(controller.getOrder(Integer.parseInt(table2.getValueAt(table2.getSelectedRow(), 1).toString())), selectedCustomerNr);
				// Använder metoden removeOrder och raderar ordern.
				model2.setRowCount(0);
				clearViewOrder();
				// Tömmer tabellen och rensar orderdetaljer.
				ArrayList<Order> tmporderlist = controller.findCustomer(selectedCustomerNr).getPreviousOrders();
				// Hämtar valda kundens resterande previousOrders och lägger dom i ArrayListen tmporderlist.
				for (Order tmporder : tmporderlist) {
					model2.addRow(new String[] {
							Integer.toString(tmporder.getCustomer().getCustomerNr()), Integer.toString(tmporder.getOrderNr()), tmporder.getRentalDate(), tmporder.getVehicle().getVehicleType() });
					// Forloopar igenom tmporderlist och skriver ut kundens resterande previousOrders i tabellen.
				}
			}
		});

		JButton btnClearViewOrder = new JButton("Rensa formulär");
		btnClearViewOrder.setBounds(388, 418, 177, 25);
		pnlViewOrder.add(btnClearViewOrder);
		btnClearViewOrder.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				model2.setRowCount(0);
				clearViewOrder();
				txtCustomerNrViewOrder.setText("");
			}
		});
	}
	// Tömmer tabellen, rensar orderdetaljer och rensar txtCustomerNrViewOrder.
	
	public void populateCustomerComboBox(){
		customerComboBox.removeAllItems();
			for (String cNr : controller.findAllCustomerNumbers()){
				customerComboBox.addItem(cNr);
			}
	}
	// Metod för att först tömma comboboxen, sen forloopa igenom ArrayListen av kundnummer som metoden findAllCustomerNumbers returnerar, sen fylla Comboboxen med kundnummer.
	
	public void populateVehicleComboBox(){
		vehicleComboBox.removeAllItems();
			for (String regNr : controller.findAllRegNumbers()){
				vehicleComboBox.addItem(regNr);
			}
	}
	// Metod för att först tömma comboboxen, sen forloopa igenom ArrayListen av regnummer som metoden findAllRegNumbers returnerar, sen fylla Comboboxen med regnummer.
	
	public void populateVehicleTypesComboBox(){
		vehicleTypesComboBox.removeAllItems();
			for (String vType : controller.findAllVehicleTypes()){
				vehicleTypesComboBox.addItem(vType);
			}
	}
	// Metod för att först tömma comboboxen, sen forloopa igenom ArrayListen av fordonstyper som metoden findAllVehicleTypes returnerar, sen fylla Comboboxen med fordonstyper.
		



	public void clearCustomer() {
		txtSearchCustomer.setText("");
		txtFirstName.setText("");
		txtLastName.setText("");
		txtStreetAddress.setText("");
		txtZipCode.setText("");
		txtCity.setText("");
		txtCountry.setText("");
		txtPhoneNumber.setText("");
		txtEmailAddress.setText("");
		txtDiscount.setText("");
	}

	public void clearVehicle() {
		txtSearchVehicle.setText("");
		txtRegNr.setText("");
		txtVehiclePrice.setText("");
		txtVehicleType.setText("");
		txtBrand.setText("");
		txtModel.setText("");
		txtModelYear.setText("");
		txtLocation.setText("");
	}

	public void clearCreateOrder() {
		txtCustomerNrNewOrder.setText("");
		txtRentalDate.setText("");
	}

	public void clearViewOrder() {
		txtRegNrViewOrder.setText("");
		txtBrandViewOrder.setText("");
		txtModelViewOrder.setText("");
		txtModelYearViewOrder.setText("");
		txtLocationViewOrder.setText("");
		txtOrderDateViewOrder.setText("");
		txtListPrice.setText("");
		txtDiscountPrice.setText("");
	}

	public void clearSelectedOrder() {
		txtRegNrViewOrder.setText("");
		txtRentalDate.setText("");
		txtVehicleType.setText("");
	}
	
	// Olika metoder för att rensa textfält.

	
	
	public boolean intIsNotParseable(String string) {
		try {
			Integer.valueOf(string);
			return false;
		}
		catch (NumberFormatException e) {
			return true;
		}
	}
	
	public boolean doubleIsNotParseable(String string) {
		try {
			Double.valueOf(string);
			return false;
		}
		catch (NumberFormatException e) {
			return true;
		}
	}
	// Metoder för att kontrollera om en String går att omvandla till int eller double.
}
